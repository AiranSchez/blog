<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XSS on アイラン　ソフトウェア開発者</title>
    <link>http://localhost:1313/jp/tags/xss/</link>
    <description>Recent content in XSS on アイラン　ソフトウェア開発者</description>
    <generator>Hugo</generator>
    <language>jp</language>
    <lastBuildDate>Sun, 14 Sep 2025 17:46:29 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/jp/tags/xss/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSRF、XSS &amp; CORS</title>
      <link>http://localhost:1313/jp/csrf-xss-cors/</link>
      <pubDate>Wed, 01 Jul 2020 13:37:00 +0000</pubDate>
      <guid>http://localhost:1313/jp/csrf-xss-cors/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;これらの用語に馴染みがないなら、あなただけではありません。数週間前、プロジェクトでこれらを考慮する必要があり、「これは何だ？」と自問する機会がありました。その結果、多くの疑問が生まれ、それをまとめてこれらのセキュリティ用語のガイドを作成しました。&lt;/p&gt;&#xA;&lt;p&gt;まず、各用語の定義と仕組みを説明します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;csrf&#34;&gt;CSRF&lt;/h2&gt;&#xA;&lt;p&gt;CSRFは &lt;strong&gt;Cross Site Request Forgery（クロスサイトリクエストフォージェリ）&lt;/strong&gt; の略で、XSRFとも呼ばれます。&lt;strong&gt;これは、ブラウザに脆弱なウェブサイトへのリクエストを送信させる攻撃です。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;例として、誰かがあなたのブラウザからメールにアクセスし、受信トレイを別のメールアドレスにリダイレクトする場合があります（個人情報を含むメッセージが漏れる可能性があります）。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://airanschez.files.wordpress.com/2020/07/1_wi0jgx4-dbt7mxupgatf7w.png?w=640&#34; alt=&#34;&#34; title=&#34; &#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;CSRF攻撃の例&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;画像では攻撃者の手順を示しています：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;まず、銀行からお金を取得するための &lt;strong&gt;悪意のあるHTMLコード&lt;/strong&gt; を作成します。&lt;/li&gt;&#xA;&lt;li&gt;次に攻撃者は &lt;strong&gt;訪問者のブラウザにコードを注入&lt;/strong&gt; します（訪問者が対象のウェブサイトにログインしていることを前提とします）。&lt;/li&gt;&#xA;&lt;li&gt;被害者は &lt;strong&gt;銀行サイトでお金を入金する操作&lt;/strong&gt; を行います。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;銀行はユーザーを確認&lt;/strong&gt; し（お金が攻撃者の口座に入金されていることには気付かず）、リクエストを受け入れます。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;この種の攻撃を防ぐための推奨事項：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用していないサービスからは &lt;strong&gt;ログアウト&lt;/strong&gt; する&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;シークレットモード&lt;/strong&gt; を使用する&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;異なるブラウザ&lt;/strong&gt; を一般用途と重要作業で使い分ける&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cors&#34;&gt;CORS&lt;/h2&gt;&#xA;&lt;p&gt;CORSは &lt;strong&gt;Cross Origin Resource Sharing（クロスオリジンリソース共有）&lt;/strong&gt; の略です。外部ドメインからコンテンツを読み込むことを禁止する &lt;strong&gt;セキュリティポリシー&lt;/strong&gt; があり、すべて同一サーバー上にある必要があります。適切に制御しないと &lt;strong&gt;セキュリティの脆弱性&lt;/strong&gt; となる可能性があります。&lt;/p&gt;&#xA;&lt;p&gt;仕組みは以下の通りです：クライアントがサーバーAから情報を取得すると、サーバーAはどのサーバーがデータにアクセス可能かを指定する &lt;strong&gt;HTTPヘッダー&lt;/strong&gt; を返します。問題なく動作するのは &lt;strong&gt;GET, HEAD, POST&lt;/strong&gt; のみで、それ以外の &lt;strong&gt;PUT, PATCH, DELETE&lt;/strong&gt; はCORSと衝突する可能性があり確認が必要です。&lt;/p&gt;&#xA;&lt;p&gt;さらに、上記のHTTPヘッダーは通常自動で設定されますが、手動で設定できるものは以下の4つです：Accept, Accept-Language, Content-Language, Content-Type。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://airanschez.files.wordpress.com/2020/07/angular_nginx_cors.png?w=800&#34; alt=&#34;&#34; title=&#34; &#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;CORSの例&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;画像はCORSの動作を示しています：クライアントが自分のサーバーから .CSS ファイルを取得する場合（同一ドメイン）は問題なく取得できます。しかし、別のドメインから .WOFF フォントを取得する場合、CORSによりアクセスが許可されます。理由としては、リクエスト元のドメインが指定されており、リクエストヘッダーで任意のオリジンへのアクセスが許可され、さらにGETリクエストでCORSの制約に抵触しないためです。&lt;/p&gt;&#xA;&lt;p&gt;もしGETの代わりにPUTでリクエストした場合は衝突が発生し、外部ドメインへ情報を送信できません。&lt;/p&gt;&#xA;&lt;h2 id=&#34;xss&#34;&gt;XSS&lt;/h2&gt;&#xA;&lt;p&gt;ブラウザからセッションをハイジャックされ、個人情報が盗まれることを聞いたことがあるかもしれません。これが &lt;strong&gt;Cross Site Scripting（XSS）&lt;/strong&gt; です。SQLインジェクションに似ていますが、XSSはクライアント側を対象とします。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
