<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TDD on アイラン　ソフトウェア開発者</title>
    <link>http://localhost:1313/jp/tags/tdd/</link>
    <description>Recent content in TDD on アイラン　ソフトウェア開発者</description>
    <generator>Hugo</generator>
    <language>jp</language>
    <lastBuildDate>Tue, 05 May 2020 11:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/jp/tags/tdd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「Agile Design with TDD」を読んだ – Carlos Blé著</title>
      <link>http://localhost:1313/jp/he-le%C3%ADdo-dise%C3%B1o-%C3%A1gil-con-tdd-de-carlos-bl%C3%A9/</link>
      <pubDate>Tue, 05 May 2020 11:00:00 +0000</pubDate>
      <guid>http://localhost:1313/jp/he-le%C3%ADdo-dise%C3%B1o-%C3%A1gil-con-tdd-de-carlos-bl%C3%A9/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;この記事を始める前に、私の学習経験について説明します。上級課程の学習中に、&lt;strong&gt;C#でのテスト&lt;/strong&gt;を&lt;strong&gt;Visual Studio&lt;/strong&gt;を使って非常に短く触れたことがあります。これらのテストは既存のコードに対して行われたもので、当初はテストはある方法で行うものだと考えていました。しかし、この本を通じて、私がまったく知らなかった多くの方法があることを学びました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;tddとは何か&#34;&gt;TDDとは何か？&lt;/h2&gt;&#xA;&lt;p&gt;本によると、&lt;strong&gt;TDD&lt;/strong&gt;は、多くのプログラマーが通常コードを書き始め、後でテストを作成することを示しています（経験の少ない人は、コードが完成した後にテストを作成し、リファクタリングによる変更が正しいかどうか自動的に確認する方法だと思うでしょう）。しかし、私の解釈は間違っており、本によれば&lt;strong&gt;テストは最初に、テストを通すために必要な最小限のコードで作成すべき&lt;/strong&gt;だと説明されています。複数のテストを作成し始めると、多くのことに気付き、それらを再利用可能な形で整理できます。その時点でテストコードのリファクタリングを行うべきです。こうして、&lt;strong&gt;TDDは「書く-テスト-リファクタリング」の継続的サイクル&lt;/strong&gt;であることがわかります（本では「赤-緑-リファクタリング」と呼ばれています）。&lt;/p&gt;&#xA;&lt;p&gt;本書で紹介される例のテストは、前半では非常に理解しやすいですが、Mockの部分が出てくると複雑になります。&lt;/p&gt;&#xA;&lt;p&gt;リファクタリングは良いことだが、やりすぎは禁物という視点があるのも良いと思いました。開発初期の段階で複雑さや抽象化を追加すると逆効果になる可能性があります。本から引用すると以下の通りです：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;「リファクタリングは行うが、適切な量とタイミングで行うこと」&lt;/p&gt;&#xA;&lt;p&gt;ページ 37&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;tddをいつ使うか&#34;&gt;TDDをいつ使うか？&lt;/h2&gt;&#xA;&lt;p&gt;すでに進んだ開発にTDDを適用するのは逆効果です。本から理解したことは、TDDは単なるツールではなく、&lt;strong&gt;テストファースト&lt;/strong&gt;に基づく方法論であるということです（TDDとテストファーストは同じではなく、TDDはその後のリファクタリングも含む概念です）。&lt;/p&gt;&#xA;&lt;p&gt;TDDは、問題をサブ問題に分け、それらを複雑さの順に段階的に解決することを促します。このタイミングでペアプログラミングを実践するのが最適です。私もLeanMindのオフィスでの最初のコーディング道場で無意識に学びました（これは別の記事で詳しく書きます）。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;「コードに執着すると、変更や削除を恐れるようになるが、時には一部分のコードをデバッグするよりも削除して最初からやり直す方が生産的であることもある。」&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;この状況に何度も直面しましたが、作業を削除してほぼゼロからやり直す勇気は評価されることが少ないです。&lt;strong&gt;TDDは態度でもあります&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;結論と学んだこと&#34;&gt;結論と学んだこと&lt;/h2&gt;&#xA;&lt;p&gt;本書から学んだもう一つのことは、本を読んだりTDDでプロジェクトを行っただけでは専門家になれないということです。習慣を身につけるには時間、努力、意志が必要です。&lt;/p&gt;&#xA;&lt;p&gt;では、この本は何のために役立つのか？主に&lt;strong&gt;TDDを取り巻く方法論&lt;/strong&gt;を理解し、テストの作成方法を学び、異なる言語でのテストを比較し、テストを始めるための人気ツールを知り、そして何よりTDDにおける協調的な考え方を学ぶことです。&lt;/p&gt;&#xA;&lt;p&gt;この本で初めて知った概念の一つは**エンドツーエンドテスト（E2E）**です。これまで私は、単体テストしか知らず、特定のタスクに焦点を当てて結果を確認するだけでした。&lt;/p&gt;&#xA;&lt;p&gt;本書の前半は私の知識レベルに最も適していると思います。Mockのような高度な概念を知らなくても理解でき、将来のプロジェクトでTDDを実装するための指針を提供してくれます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/carlosble&#34;&gt;Carlos Blé&lt;/a&gt; に感謝します。本書で紹介された業界の著名なプロフェッショナルたち（以前は知らなかった人たち）もフォローし始めました：&lt;a href=&#34;https://twitter.com/unclebobmartin&#34;&gt;Robert C. Martin&lt;/a&gt;、&lt;a href=&#34;https://twitter.com/codecopkofler&#34;&gt;Peter Kofler&lt;/a&gt;、&lt;a href=&#34;https://twitter.com/robmyers&#34;&gt;Rob Myers&lt;/a&gt;、&lt;a href=&#34;https://twitter.com/mattwynne&#34;&gt;Matt Wynne&lt;/a&gt;。TDDの哲学を理解し、向上させたい方には強くおすすめします。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
