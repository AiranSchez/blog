<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学習 on アイラン　ソフトウェア開発者</title>
    <link>http://localhost:1313/jp/tags/%E5%AD%A6%E7%BF%92/</link>
    <description>Recent content in 学習 on アイラン　ソフトウェア開発者</description>
    <generator>Hugo</generator>
    <language>jp</language>
    <lastBuildDate>Sun, 14 Sep 2025 17:46:29 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/jp/tags/%E5%AD%A6%E7%BF%92/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>11時間のプロセスを37分に短縮した方法</title>
      <link>http://localhost:1313/jp/como-pasamos-un-proceso-de-11-horas-a-37-minutos/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/jp/como-pasamos-un-proceso-de-11-horas-a-37-minutos/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;この記事は、ウリセスが書いた &lt;a href=&#34;https://ulisesantana.dev/blog/2022/como-pase-un-proceso-en-nodejs-de-5-horas-a-5-minutos/&#34;&gt;5時間のプロセスを5分に短縮した方法&lt;/a&gt; に非常によく似ていますが、文脈が異なります。ここではNodeJSのコードを最適化するのではなく、データエンジニアリングにおけるPythonの適用について扱っており、今回は &lt;strong&gt;11時間かかっていたプロセスを37分に短縮&lt;/strong&gt; しました。まずは少し背景を説明させてください。&lt;/p&gt;&#xA;&lt;h3 id=&#34;問題点冬が来る&#34;&gt;問題点（冬が来る）&lt;/h3&gt;&#xA;&lt;p&gt;現在、私たちは &lt;a href=&#34;https://airflow.apache.org/&#34;&gt;Apache Airflow&lt;/a&gt; というツールを使用してプロセスの自動化を管理しています。これを使うと、crontabでプロセスの実行スケジュールを設定でき、自動的に実行され、Pythonコードで定義されたタスクを実行します。&lt;/p&gt;&#xA;&lt;p&gt;私たちの多くのプロセスのうちの1つは、プロバイダーからのデータ抽出と、その後ドメインに適応させるための変換です。このプロセスは通常 &lt;strong&gt;約5時間&lt;/strong&gt; かかっており、いくつかの理由である程度許容できるものでした：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通常は夜間に自動で実行され、翌朝には完了している&lt;/li&gt;&#xA;&lt;li&gt;大量のデータを扱うため、すべての操作に時間がかかる&lt;/li&gt;&#xA;&lt;li&gt;リアルタイムで必要なわけではないので、他のチームにとっては重要ではない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以下のスクリーンショットは、プロセスが時々失敗することがあるものの、確認と修正で問題なく安定していることを示しています：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/proceso11horas-1.png&#34; alt=&#34;proceso11horas-1&#34; title=&#34; &#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;そして冬が到来&#34;&gt;そして冬が到来&lt;/h3&gt;&#xA;&lt;p&gt;何らかの理由で、キューにさらに数百万件のレコードが追加され、実行時間が大幅に増加しました。具体的には、5時間から11時間に増加しました：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/proceso11horas-2.png&#34; alt=&#34;proceso11horas-2&#34; title=&#34; &#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;これは管理不可能で持続不可能な状態になっていました。ほぼ半日かかるプロセスが、24時間で2回も実行されるのです…計算してみてください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;なぜこのようなことが起きたのか&#34;&gt;なぜこのようなことが起きたのか？&lt;/h2&gt;&#xA;&lt;p&gt;データ処理において定番のライブラリは &lt;a href=&#34;https://pandas.pydata.org/&#34;&gt;Pandas&lt;/a&gt; で、とてもよく機能します。しかし、大規模なデータセットに対してはパフォーマンスが悪くなります。そこで登場するのが &lt;a href=&#34;https://www.dask.org/&#34;&gt;Dask&lt;/a&gt; です — 大量のデータを効率的に処理するために設計されています。&lt;/p&gt;&#xA;&lt;p&gt;Daskは大規模データセットでPandasを上回る性能を発揮しますが、正しく使わないと扱いが難しい場合があります。ベストプラクティスを扱った書籍も多数あり、例えば &lt;a href=&#34;https://www.amazon.es/Data-Science-Scale-Python-Dask/dp/1617295604&#34;&gt;Data Science at Scale with Python and Dask&lt;/a&gt; があります。&lt;/p&gt;&#xA;&lt;p&gt;そのため、私たちはDaskの使い方に何か問題があるのではないかと考え、コードを見直すことにしました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;謎の謎&#34;&gt;謎の謎&lt;/h2&gt;&#xA;&lt;p&gt;まず、プロセスが何をしているのかを確認しました：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;3つのデータセットを収集し、1つに統合して、データの出所に基づいた優先リストに従って処理します。これを &lt;strong&gt;&lt;code&gt;provider_rank_list&lt;/code&gt;&lt;/strong&gt; と呼びます（覚えておいてください、後で戻ってきます）。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;3つのソースデータセットは単一のファイルではなく、Daskが処理しやすいように分割されています。ここで気づいたのは、その分割が非常に小さいことです — &lt;strong&gt;各1〜2MBの1028パーティション&lt;/strong&gt;。これはDaskにとって致命的で、すべての利点が逆効果になってしまいます。&lt;/p&gt;&#xA;&lt;p&gt;私たちが実装した改善の1つは、1028パーティションをより大きなファイルにまとめることでした（ただし、Daskが効率的に動作できるように分割は維持）。&lt;/p&gt;&#xA;&lt;p&gt;ここで今日の重要なアドバイス：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Daskを使う場合、パーティションはデータ量に合わせて設定してください。あまりにも小さなパーティションが多すぎたり、大きすぎるパーティションが少なすぎたりしないようにしましょう。公式ドキュメントでは &lt;strong&gt;約100MBのパーティション&lt;/strong&gt; を推奨しています。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;考え方を示すコード例は以下の通りです：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;input_dataset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dask&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_dask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path_to_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;dataset_to_process&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repartition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partition_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_partition_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Fix input to ensure it doesn’t break anything&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Lots&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;doing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;things&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;result_dataframe&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;processed_dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repartition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partition_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_partition_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Fix output size in case it grew during processing&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;なぜファイル数ではなくパーティションサイズを設定するのか&#34;&gt;なぜファイル数ではなくパーティションサイズを設定するのか？&lt;/h2&gt;&#xA;&lt;p&gt;良い質問です。Daskには2つのパーティション方法があります：&lt;code&gt;npartitions&lt;/code&gt; と &lt;code&gt;partition_size&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>モブプログラミングとペアプログラミング</title>
      <link>http://localhost:1313/jp/mob-and-pair-programming/</link>
      <pubDate>Thu, 18 Mar 2021 14:21:00 +0000</pubDate>
      <guid>http://localhost:1313/jp/mob-and-pair-programming/</guid>
      <description>&lt;h2 id=&#34;モブプログラミング&#34;&gt;モブプログラミング&lt;/h2&gt;&#xA;&lt;p&gt;私の短い職業経験の中で、ペアプログラミングや時にはモブプログラミングを体験する機会がありました。最初に思うのは「もし各プログラマーが個別に作業すれば、仕事はもっと早く進むのでは？」ということです。しかし実際には、他の人の作業に依存してソフトウェア全体の理解を深める必要があります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;利点&#34;&gt;利点&lt;/h2&gt;&#xA;&lt;p&gt;複数のメンバーが集まることで得られるメリットは&lt;strong&gt;デメリットよりも大きい&lt;/strong&gt;です。私が特に価値を感じたポイントは次の通りです：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一人がコーディングしている間に、もう一人がレビューしてIDEが見逃すミスをチェックできる&lt;/li&gt;&#xA;&lt;li&gt;アイデアを議論して、最適な解決策をチームで選べる&lt;/li&gt;&#xA;&lt;li&gt;チームとしての連帯感が生まれ、孤立したプログラマーというステレオタイプを覆せる。また、コミュニケーション力も向上する&lt;/li&gt;&#xA;&lt;li&gt;ドライバーとナビゲーターの役割を交代し、「自動操縦モード」に陥るのを防げる&lt;/li&gt;&#xA;&lt;li&gt;知識を相互に補完できる（自分が知らないことを他の人が知っている場合もある）&lt;/li&gt;&#xA;&lt;li&gt;フィードバックが迅速になる。直接質問できるため、個別作業のように何度も隣の席に行く必要がない&lt;/li&gt;&#xA;&lt;li&gt;新しい視点や考え方を学べる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;「二人の頭は一人より良い」「四つの目は二つの目よりも良く見える」ということわざがありますが、ペア/モブプログラミングにも同じことが言えます。&lt;strong&gt;すべてのアイデアをテーブルに出すことで&lt;/strong&gt;、間違った方向に進むリスクを減らし、最適な解決策を選べます。&lt;/p&gt;&#xA;&lt;p&gt;テストはペア/モブプログラミングと密接に関連しています。これは非常に重要ですが、適切に実施されないことも多く、コードの保守や更新が困難になります。グループで日常的にこれらの手法を実践することで、将来のトラブルを防ぎ、変更が問題を引き起こす可能性を早期に検知できます。&lt;strong&gt;問題の特定にも非常に役立ちます&lt;/strong&gt;。特に大規模プロジェクトでは不可欠です。&lt;/p&gt;&#xA;&lt;p&gt;カルロスが言及している重要なポイントとして、ナビゲーターの役割を担当する場合は、ドライバーが&lt;strong&gt;アイデアを最後まで出し切る&lt;/strong&gt;のを待ち、できるだけ&lt;strong&gt;思考の流れを中断しない&lt;/strong&gt;ことです。中断があった場合は、後でアイデアや提案を共有しましょう（忘れないようにメモしておく）。&lt;/p&gt;&#xA;&lt;p&gt;モブプログラミングでは、アイデアを一度に出しすぎず、まず議論してから提示する方が良いです。ドライバーが混乱するのを防ぎ、実装ミスを減らせます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;&#xA;&lt;p&gt;まとめると、ペア/モブプログラミングの利点はデメリットを大きく上回ります。これらの手法は個別作業を完全に置き換えるわけではありませんが、&lt;strong&gt;学習効率を高め、個人・チーム両方の作業を最適化&lt;/strong&gt;してくれます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSRF、XSS &amp; CORS</title>
      <link>http://localhost:1313/jp/csrf-xss-cors/</link>
      <pubDate>Wed, 01 Jul 2020 13:37:00 +0000</pubDate>
      <guid>http://localhost:1313/jp/csrf-xss-cors/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;これらの用語に馴染みがないなら、あなただけではありません。数週間前、プロジェクトでこれらを考慮する必要があり、「これは何だ？」と自問する機会がありました。その結果、多くの疑問が生まれ、それをまとめてこれらのセキュリティ用語のガイドを作成しました。&lt;/p&gt;&#xA;&lt;p&gt;まず、各用語の定義と仕組みを説明します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;csrf&#34;&gt;CSRF&lt;/h2&gt;&#xA;&lt;p&gt;CSRFは &lt;strong&gt;Cross Site Request Forgery（クロスサイトリクエストフォージェリ）&lt;/strong&gt; の略で、XSRFとも呼ばれます。&lt;strong&gt;これは、ブラウザに脆弱なウェブサイトへのリクエストを送信させる攻撃です。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;例として、誰かがあなたのブラウザからメールにアクセスし、受信トレイを別のメールアドレスにリダイレクトする場合があります（個人情報を含むメッセージが漏れる可能性があります）。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://airanschez.files.wordpress.com/2020/07/1_wi0jgx4-dbt7mxupgatf7w.png?w=640&#34; alt=&#34;&#34; title=&#34; &#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;CSRF攻撃の例&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;画像では攻撃者の手順を示しています：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;まず、銀行からお金を取得するための &lt;strong&gt;悪意のあるHTMLコード&lt;/strong&gt; を作成します。&lt;/li&gt;&#xA;&lt;li&gt;次に攻撃者は &lt;strong&gt;訪問者のブラウザにコードを注入&lt;/strong&gt; します（訪問者が対象のウェブサイトにログインしていることを前提とします）。&lt;/li&gt;&#xA;&lt;li&gt;被害者は &lt;strong&gt;銀行サイトでお金を入金する操作&lt;/strong&gt; を行います。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;銀行はユーザーを確認&lt;/strong&gt; し（お金が攻撃者の口座に入金されていることには気付かず）、リクエストを受け入れます。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;この種の攻撃を防ぐための推奨事項：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用していないサービスからは &lt;strong&gt;ログアウト&lt;/strong&gt; する&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;シークレットモード&lt;/strong&gt; を使用する&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;異なるブラウザ&lt;/strong&gt; を一般用途と重要作業で使い分ける&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cors&#34;&gt;CORS&lt;/h2&gt;&#xA;&lt;p&gt;CORSは &lt;strong&gt;Cross Origin Resource Sharing（クロスオリジンリソース共有）&lt;/strong&gt; の略です。外部ドメインからコンテンツを読み込むことを禁止する &lt;strong&gt;セキュリティポリシー&lt;/strong&gt; があり、すべて同一サーバー上にある必要があります。適切に制御しないと &lt;strong&gt;セキュリティの脆弱性&lt;/strong&gt; となる可能性があります。&lt;/p&gt;&#xA;&lt;p&gt;仕組みは以下の通りです：クライアントがサーバーAから情報を取得すると、サーバーAはどのサーバーがデータにアクセス可能かを指定する &lt;strong&gt;HTTPヘッダー&lt;/strong&gt; を返します。問題なく動作するのは &lt;strong&gt;GET, HEAD, POST&lt;/strong&gt; のみで、それ以外の &lt;strong&gt;PUT, PATCH, DELETE&lt;/strong&gt; はCORSと衝突する可能性があり確認が必要です。&lt;/p&gt;&#xA;&lt;p&gt;さらに、上記のHTTPヘッダーは通常自動で設定されますが、手動で設定できるものは以下の4つです：Accept, Accept-Language, Content-Language, Content-Type。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://airanschez.files.wordpress.com/2020/07/angular_nginx_cors.png?w=800&#34; alt=&#34;&#34; title=&#34; &#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;CORSの例&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;画像はCORSの動作を示しています：クライアントが自分のサーバーから .CSS ファイルを取得する場合（同一ドメイン）は問題なく取得できます。しかし、別のドメインから .WOFF フォントを取得する場合、CORSによりアクセスが許可されます。理由としては、リクエスト元のドメインが指定されており、リクエストヘッダーで任意のオリジンへのアクセスが許可され、さらにGETリクエストでCORSの制約に抵触しないためです。&lt;/p&gt;&#xA;&lt;p&gt;もしGETの代わりにPUTでリクエストした場合は衝突が発生し、外部ドメインへ情報を送信できません。&lt;/p&gt;&#xA;&lt;h2 id=&#34;xss&#34;&gt;XSS&lt;/h2&gt;&#xA;&lt;p&gt;ブラウザからセッションをハイジャックされ、個人情報が盗まれることを聞いたことがあるかもしれません。これが &lt;strong&gt;Cross Site Scripting（XSS）&lt;/strong&gt; です。SQLインジェクションに似ていますが、XSSはクライアント側を対象とします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「Agile Design with TDD」を読んだ – Carlos Blé著</title>
      <link>http://localhost:1313/jp/he-le%C3%ADdo-dise%C3%B1o-%C3%A1gil-con-tdd-de-carlos-bl%C3%A9/</link>
      <pubDate>Tue, 05 May 2020 11:00:00 +0000</pubDate>
      <guid>http://localhost:1313/jp/he-le%C3%ADdo-dise%C3%B1o-%C3%A1gil-con-tdd-de-carlos-bl%C3%A9/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;この記事を始める前に、私の学習経験について説明します。上級課程の学習中に、&lt;strong&gt;C#でのテスト&lt;/strong&gt;を&lt;strong&gt;Visual Studio&lt;/strong&gt;を使って非常に短く触れたことがあります。これらのテストは既存のコードに対して行われたもので、当初はテストはある方法で行うものだと考えていました。しかし、この本を通じて、私がまったく知らなかった多くの方法があることを学びました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;tddとは何か&#34;&gt;TDDとは何か？&lt;/h2&gt;&#xA;&lt;p&gt;本によると、&lt;strong&gt;TDD&lt;/strong&gt;は、多くのプログラマーが通常コードを書き始め、後でテストを作成することを示しています（経験の少ない人は、コードが完成した後にテストを作成し、リファクタリングによる変更が正しいかどうか自動的に確認する方法だと思うでしょう）。しかし、私の解釈は間違っており、本によれば&lt;strong&gt;テストは最初に、テストを通すために必要な最小限のコードで作成すべき&lt;/strong&gt;だと説明されています。複数のテストを作成し始めると、多くのことに気付き、それらを再利用可能な形で整理できます。その時点でテストコードのリファクタリングを行うべきです。こうして、&lt;strong&gt;TDDは「書く-テスト-リファクタリング」の継続的サイクル&lt;/strong&gt;であることがわかります（本では「赤-緑-リファクタリング」と呼ばれています）。&lt;/p&gt;&#xA;&lt;p&gt;本書で紹介される例のテストは、前半では非常に理解しやすいですが、Mockの部分が出てくると複雑になります。&lt;/p&gt;&#xA;&lt;p&gt;リファクタリングは良いことだが、やりすぎは禁物という視点があるのも良いと思いました。開発初期の段階で複雑さや抽象化を追加すると逆効果になる可能性があります。本から引用すると以下の通りです：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;「リファクタリングは行うが、適切な量とタイミングで行うこと」&lt;/p&gt;&#xA;&lt;p&gt;ページ 37&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;tddをいつ使うか&#34;&gt;TDDをいつ使うか？&lt;/h2&gt;&#xA;&lt;p&gt;すでに進んだ開発にTDDを適用するのは逆効果です。本から理解したことは、TDDは単なるツールではなく、&lt;strong&gt;テストファースト&lt;/strong&gt;に基づく方法論であるということです（TDDとテストファーストは同じではなく、TDDはその後のリファクタリングも含む概念です）。&lt;/p&gt;&#xA;&lt;p&gt;TDDは、問題をサブ問題に分け、それらを複雑さの順に段階的に解決することを促します。このタイミングでペアプログラミングを実践するのが最適です。私もLeanMindのオフィスでの最初のコーディング道場で無意識に学びました（これは別の記事で詳しく書きます）。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;「コードに執着すると、変更や削除を恐れるようになるが、時には一部分のコードをデバッグするよりも削除して最初からやり直す方が生産的であることもある。」&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;この状況に何度も直面しましたが、作業を削除してほぼゼロからやり直す勇気は評価されることが少ないです。&lt;strong&gt;TDDは態度でもあります&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;結論と学んだこと&#34;&gt;結論と学んだこと&lt;/h2&gt;&#xA;&lt;p&gt;本書から学んだもう一つのことは、本を読んだりTDDでプロジェクトを行っただけでは専門家になれないということです。習慣を身につけるには時間、努力、意志が必要です。&lt;/p&gt;&#xA;&lt;p&gt;では、この本は何のために役立つのか？主に&lt;strong&gt;TDDを取り巻く方法論&lt;/strong&gt;を理解し、テストの作成方法を学び、異なる言語でのテストを比較し、テストを始めるための人気ツールを知り、そして何よりTDDにおける協調的な考え方を学ぶことです。&lt;/p&gt;&#xA;&lt;p&gt;この本で初めて知った概念の一つは**エンドツーエンドテスト（E2E）**です。これまで私は、単体テストしか知らず、特定のタスクに焦点を当てて結果を確認するだけでした。&lt;/p&gt;&#xA;&lt;p&gt;本書の前半は私の知識レベルに最も適していると思います。Mockのような高度な概念を知らなくても理解でき、将来のプロジェクトでTDDを実装するための指針を提供してくれます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/carlosble&#34;&gt;Carlos Blé&lt;/a&gt; に感謝します。本書で紹介された業界の著名なプロフェッショナルたち（以前は知らなかった人たち）もフォローし始めました：&lt;a href=&#34;https://twitter.com/unclebobmartin&#34;&gt;Robert C. Martin&lt;/a&gt;、&lt;a href=&#34;https://twitter.com/codecopkofler&#34;&gt;Peter Kofler&lt;/a&gt;、&lt;a href=&#34;https://twitter.com/robmyers&#34;&gt;Rob Myers&lt;/a&gt;、&lt;a href=&#34;https://twitter.com/mattwynne&#34;&gt;Matt Wynne&lt;/a&gt;。TDDの哲学を理解し、向上させたい方には強くおすすめします。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
